<?php

namespace Proxies\__CG__\wyshy\backNavBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Actualite extends \wyshy\backNavBundle\Entity\Actualite implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['path' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->path);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'idactualite', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'sujet', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'datepublication', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'datedestruction', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'description', 'path', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'file'];
        }

        return ['__isInitialized__', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'idactualite', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'sujet', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'datepublication', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'datedestruction', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'description', '' . "\0" . 'wyshy\\backNavBundle\\Entity\\Actualite' . "\0" . 'file'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Actualite $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->path);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getAbsolutePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsolutePath', []);

        return parent::getAbsolutePath();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', []);

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function upload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upload', []);

        return parent::upload();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', [$file]);

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', []);

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdactualite()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdactualite();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdactualite', []);

        return parent::getIdactualite();
    }

    /**
     * {@inheritDoc}
     */
    public function getSujet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSujet', []);

        return parent::getSujet();
    }

    /**
     * {@inheritDoc}
     */
    public function getDatepublication()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatepublication', []);

        return parent::getDatepublication();
    }

    /**
     * {@inheritDoc}
     */
    public function getDatedestruction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatedestruction', []);

        return parent::getDatedestruction();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdactualite($idactualite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdactualite', [$idactualite]);

        return parent::setIdactualite($idactualite);
    }

    /**
     * {@inheritDoc}
     */
    public function setSujet($sujet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSujet', [$sujet]);

        return parent::setSujet($sujet);
    }

    /**
     * {@inheritDoc}
     */
    public function setDatepublication(\DateTime $datepublication)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatepublication', [$datepublication]);

        return parent::setDatepublication($datepublication);
    }

    /**
     * {@inheritDoc}
     */
    public function setDatedestruction(\DateTime $datedestruction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatedestruction', [$datedestruction]);

        return parent::setDatedestruction($datedestruction);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

}
